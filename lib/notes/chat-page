import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../../core/services/database_service.dart';
import '../../../core/shared/constants.dart';
import '../../widgets/widgets.dart';
import '../group info/group_info.dart';
import 'bloc/chat_bloc.dart';
import 'bloc/chat_event.dart';
import 'bloc/chat_state.dart';
import 'chat_page_widgets.dart';

class ChatPage extends StatefulWidget {
  final String groupId;
  final String groupName;
  final String userName;

  const ChatPage({
    super.key,
    required this.groupId,
    required this.groupName,
    required this.userName,
  });

  @override
  State<ChatPage> createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  final TextEditingController messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final FocusNode messageFocusNode = FocusNode();
  final ImagePicker _picker = ImagePicker();

  bool isEmojiVisible = false;
  double uploadProgress = 0.0;

  @override
  void initState() {
    super.initState();

    final String? userId = FirebaseAuth.instance.currentUser?.uid;

    // Load chats
    BlocProvider.of<ChatBloc>(context).add(
      LoadChats(groupId: widget.groupId),
    );

    // Run fix for broken messages
    if (userId != null) {
      DatabaseService(uid: userId).fixBrokenMessages(widget.groupId);
    } else {
      print('⚠️ Could not find logged-in user');
    }
  }


  Future<void> _pickMedia() async {
    try {
      final List<XFile>? pickedFiles = await _picker.pickMultipleMedia(
        imageQuality: 85,
        requestFullMetadata: false,
      );

      if (pickedFiles != null && pickedFiles.isNotEmpty) {
        for (final pickedFile in pickedFiles) {
          // Just dispatch the event to BLoC, let it handle the upload
          BlocProvider.of<ChatBloc>(context).add(
            SendMessage(
              groupId: widget.groupId,
              userName: widget.userName,
              message: pickedFile.path,
            ),
          );
        }
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e'), backgroundColor: Colors.red),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Constants().backGroundColor,
      appBar: AppBar(
        backgroundColor: Constants().primaryColor,
        iconTheme: const IconThemeData(color: Colors.white),
        centerTitle: true,
        elevation: 4,
        title: Text(
          widget.groupName,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        actions: [
          IconButton(
            onPressed: () async {
              String fetchedAdmin =
              await DatabaseService().getGroupAdmin(widget.groupId);
              nextScreen(
                context,
                GroupInfo(
                  groupId: widget.groupId,
                  groupName: widget.groupName,
                  adminName: fetchedAdmin,
                ),
              );
            },
            icon: const Icon(Icons.info_outline, color: Colors.white),
          ),
        ],
      ),
      body: Stack(
        children: [
          Column(
            children: [
              Expanded(child: chatMessages(context, _scrollController)),
              emojiPicker(
                isEmojiVisible: isEmojiVisible,
                controller: messageController,
                focusNode: messageFocusNode,
              ),
              BlocBuilder<ChatBloc, ChatState>(
                builder: (context, state) {
                  String preview = "";
                  bool isUploading = false;

                  if (state is ChatLoaded) {
                    preview = state.mediaPreview;
                    isUploading = state.isUploading;
                  }

                  return messageInputField(
                    messageController: messageController,
                    messageFocusNode: messageFocusNode,
                    isEmojiVisible: isEmojiVisible,
                    onMediaTap: _pickMedia,
                    onEmojiTap: () {
                      setState(() => isEmojiVisible = !isEmojiVisible);
                      if (isEmojiVisible) {
                        FocusScope.of(context).unfocus();
                      } else {
                        messageFocusNode.requestFocus();
                      }
                    },
                    onSendTap: () {
                      if (messageController.text.isNotEmpty && !isUploading) {
                        BlocProvider.of<ChatBloc>(context).add(
                          SendMessage(
                            groupId: widget.groupId,
                            userName: widget.userName,
                            message: messageController.text,
                          ),
                        );
                        messageController.clear();
                        messageFocusNode.requestFocus();
                      }
                    },
                    mediaPreview: preview,
                    onRemoveMediaPreview: () {
                      BlocProvider.of<ChatBloc>(context).add(UpdateMediaPreview(path: ""));
                    },
                    isUploading: isUploading,
                  );
                },
              ),
            ],
          ),
          if (uploadProgress > 0 && uploadProgress < 1)
            uploadProgressIndicator(uploadProgress),
        ],
      ),
    );
  }
}
